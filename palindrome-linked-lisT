class Solution {
    public boolean isPalindrome(ListNode head) {
        if (head == null) {
            return true;
        }

        ListNode slow = head;
        ListNode fast = head;

        // Step 1: Find middle
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        // Step 2: Reverse first half
        ListNode temp = head;
        ListNode prev = null;
        while (temp != slow) {
            ListNode newNode = temp.next;
            temp.next = prev;
            prev = temp;
            temp = newNode;
        }

        // Step 3: Skip middle node if odd length
        if (fast != null) {
            slow = slow.next;
        }

        // Step 4: Compare both halves
        while (slow != null && prev != null) {
            if (slow.val != prev.val) {
                return false;
            }
            slow = slow.next;
            prev = prev.next;
        }

        return true;
    }
}
